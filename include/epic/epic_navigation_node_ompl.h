/**
 *  The MIT License (MIT)
 *
 *  Copyright (c) 2015 Kyle Hollins Wray, University of Massachusetts
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of
 *  this software and associated documentation files (the "Software"), to deal in
 *  the Software without restriction, including without limitation the rights to
 *  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 *  the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 *  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 *  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 *  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


#ifndef EPIC_NAVIGATION_NODE_OMPL_H
#define EPIC_NAVIGATION_NODE_OMPL_H


#include <ros/ros.h>

#include <nav_msgs/OccupancyGrid.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>

#include <ompl/base/Planner.h>
#include <ompl/base/PlannerStatus.h>

#include <tuple>

// Generated by having the .srv files defined.
#include <epic/ModifyGoals.h>
#include <epic/SetCells.h>
#include <epic/ComputePath.h>

namespace epic {

#define EPIC_ALGORITHM_RRT_CONNECT      0
#define EPIC_ALGORITHM_RRT_STAR         1
#define EPIC_ALGORITHM_LAZY_RRT         2
#define EPIC_ALGORITHM_LAZY_PRM         3
#define EPIC_ALGORITHM_PRM_STAR         4
#define EPIC_ALGORITHM_LAZY_PRM_STAR    5
#define NUM_EPIC_ALGORITHMS             6

class EpicNavigationNodeOMPL {
public:
    /**
     *  The constructor for the EpicNavigationNodeOMPL, enabling the selection of the planner.
     *  @param  nh      The node handle from main.
     *  @param  alg     The algorithm to use (see defines above).
     */
    EpicNavigationNodeOMPL(ros::NodeHandle &nh, unsigned int alg);

    /**
     *  The deconstructor for the EpicNavigationNodeOMPL.
     */
    virtual ~EpicNavigationNodeOMPL();

    /**
     *  Initialize the services and messages.
     *  @return True if successful in registering and subscribing, false otherwise.
     */
    bool initMsgs();

    /**
     *  Update the harmonic function or other planner one step.
     *  @param  t   The time to spend updating the planner.
     */
    void update(float t);

private:
    /**
     *  Initialize the algorithm.
     */
    void initAlg();

    /**
     *  Uninitialize the algorithm.
     */
    void uninitAlg();

    /**
     *  Set the boundaries as obstacles for the occupancy grid.
     */
    void setBoundariesAsObstacles();

    /**
     *  Convert a "float pixel" map coordinate to a world coordinate.
     *  @param  mx  The "float pixel" map x coordinate.
     *  @param  my  The "float pixel" map y coordinate.
     *  @param  wx  The world x coordinate. This will be modified.
     *  @param  wy  The world y coordinate. This will be modified.
     */
    void mapToWorld(float mx, float my, float &wx, float &wy) const;

    /**
     *  Convert a "float pixel" map coordinate to a world coordinate.
     *  @param  wx  The world x coordinate.
     *  @param  wy  The world y coordinate.
     *  @param  mx  The "float pixel" map x coordinate. This will be modified.
     *  @param  my  The "float pixel" map y coordinate. This will be modified.
     */
    bool worldToMap(float wx, float wy, float &mx, float &my) const;

    /**
     *  Check if a cell is an obstacle or not.
     *  @param  x   The x cell index.
     *  @param  y   The y cell index.
     *  @return True if it is an obstacle, false otherwise.
     */
    bool isCellObstacle(unsigned int x, unsigned int y);

    /**
     *  Check if a cell is a goal or not.
     *  @param  x   The x cell index.
     *  @param  y   The y cell index.
     *  @return True if it is a goal, false otherwise.
     */
    bool isCellGoal(unsigned int x, unsigned int y);

    /**
     *  Handler for receiving OccupancyGrid messages (see defines above; values differ here).
     *  @param  msg     The OccupancyGrid message.
     */
    void subOccupancyGrid(const nav_msgs::OccupancyGrid::ConstPtr &msg);

    /**
     *  Handler for receiving add goal(s) service request. Assumption: These are not initially obstacles.
     *  @param  req     The AddGoal service request containing the goal location(s) to add.
     *  @param  res     The AddGoal service response containing if it was successful or not. 
     *  @return Returns true if successful, false otherwise.
     */
    bool srvAddGoals(epic::ModifyGoals::Request &req, epic::ModifyGoals::Response &res);

    /**
     *  Handler for receiving remove goal(s) messages. Assumption: Removed goals become free space.
     *  @param  req     The RemoveGoal service request containing the goal location(s) to remove.
     *  @param  res     The RemoveGoal service response containing if it was successful or not.
     *  @return Returns true if successful, false otherwise.
     */
    bool srvRemoveGoals(epic::ModifyGoals::Request &req, epic::ModifyGoals::Response &res);

    /**
     *  Handler for receiving set cells messages. This allows for quick updates to the occupancy grid.
     *  @param  req     The RemoveGoal service request containing the cells to set and resulting desired type.
     *  @param  res     The RemoveGoal service response containing if it was successful or not.
     *  @return Returns true if successful, false otherwise.
     */
    bool srvSetCells(epic::SetCells::Request &req, epic::SetCells::Response &res);

    /**
     *  Handler for service requests for generating Path messages.
     *  @param  req     The ComputePath service request containing the start location, max length, precision, etc.
     *  @param  res     The ComputePath service response containing the resulting path.
     *  @return Returns true if successful, false otherwise.
     */
    bool srvComputePath(epic::ComputePath::Request &req, epic::ComputePath::Response &res);

    /**
     *  Handler for receiving PoseWithConvarianceStamped messages for the "/initialpose" topic,
     *  published by rviz by clicking the "2D Nav Goal" button.
     *  @param  msg     The PoseWithConvarianceStamped message.
     */
    void subMapPoseEstimate(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr &msg);

    /**
     *  Handler for receiving PostStamped messages for the "/move_base_simple/goal" topic, published
     *  by rviz by clicking the "2D Nav Goal" button.
     *  @param  msg     The PoseStamped message.
     */
    void subMapNavGoal(const geometry_msgs::PoseStamped::ConstPtr &msg);

    // A private node handle; usually a reference to the one created in the node's "main" function.
    ros::NodeHandle private_node_handle;

    // The subscriber for the OccupancyGrid message.
    ros::Subscriber sub_occupancy_grid;

    // The subscriber for the "/initialpose" topic, published by rviz
    // by clicking the "2D Nav Goal" button.
    ros::Subscriber sub_map_pose_estimate;

    // The subscriber for the "/move_base_simple/goal" topic, published by rviz
    // by clicking the "2D Nav Goal" button.
    ros::Subscriber sub_map_nav_goal;

    // The publisher for the "
    ros::Publisher pub_map_path;

    // If a goal has ever been added, however, only with the "subMapGoal" function.
    bool goal_added;

    // The last goal location of the robot. Used by "subMapGoal" function.
    // Assigned in rviz via "2D Nav Goal" button.
    geometry_msgs::PoseStamped last_goal;

    // The current pose of the robot. Used by "subMapGoal" function.
    // Assigned in rviz via "2D Pose Estimate" button.
    geometry_msgs::PoseStamped current_pose;

    // The service for AddGoal.
    ros::ServiceServer srv_add_goals;

    // The service for RemoveGoal.
    ros::ServiceServer srv_remove_goals;

    // The service for SetCells.
    ros::ServiceServer srv_set_cells;

    // The service for ComputePath.
    ros::ServiceServer srv_compute_path;

    // Current width of the map.
    unsigned int width;

    // Current height of the map.
    unsigned int height;

    // Current occupancy grid, following EPIC_CELL_TYPE conventions.
    int *occupancy_grid;

    // Current resolution of the map.
    float resolution;

    // Current x origin offset of the map.
    float x_origin;

    // Current y origin offset of the map.
    float y_origin;

    // The algorithm to use.
    unsigned int algorithm;

    // The planning algorithm for any algorithm.
    ompl::base::PlannerPtr ompl_planner;

    // The planner's status for any algorithm.
    ompl::base::PlannerStatus ompl_planner_status;

    // The start location for any algorithhm.
    std::pair<double, double> start_location;

    // If the start location is assigned for any algorithm.
    bool start_assigned;

    // The goal location for any algorithm.
    std::pair<double, double> goal_location;

    // If the goal location is assigned for any algorithm.
    bool goal_assigned;

    // If this class' services and subscriptions have been properly initialized or not.
    bool init_msgs;

    // If this class' algorithm variables have been properly initialized or not.
    bool init_alg;

};

};


#endif // EPIC_NAVIGATION_NODE_OMPL_H

