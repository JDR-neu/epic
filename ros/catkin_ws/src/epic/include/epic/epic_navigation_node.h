/**
 *  The MIT License (MIT)
 *
 *  Copyright (c) 2015 Kyle Hollins Wray, University of Massachusetts
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of
 *  this software and associated documentation files (the "Software"), to deal in
 *  the Software without restriction, including without limitation the rights to
 *  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 *  the Software, and to permit persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 *  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 *  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 *  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


#ifndef EPIC_NAVIGATION_NODE_H
#define EPIC_NAVIGATION_NODE_H


#include <ros/ros.h>

#include <nav_msgs/OccupancyGrid.h>

#include <harmonic/harmonic.h>

// Generated by having the .srv files defined.
#include <epic/ModifyGoals.h>
#include <epic/ComputePath.h>

namespace epic {

#define EPIC_ALGORITHM_HARMONIC         0
#define EPIC_ALGORITHM_RRT_CONNECT      1
#define EPIC_ALGORITHM_RRT_STAR         2
#define EPIC_ALGORITHM_LAZY_RRT         3
#define EPIC_ALGORITHM_LAZY_PRM         4
#define EPIC_ALGORITHM_PRM_STAR         5
#define EPIC_ALGORITHM_LAZY_PRM_STAR    6
#define NUM_EPIC_ALGORITHMS             7

#define EPIC_OCCUPANCY_GRID_MAX         100
#define EPIC_OCCUPANCY_GRID_MIN         0
#define EPIC_OCCUPANCY_GRID_UNKNOWN     -1
#define EPIC_OCCUPANCY_GRID_NO_CHANGE   -2

class EpicNavigationNode {
public:
    /**
     *  The default constructor for the EpicNavigationNode. Defaults to 'harmonic'.
     */
    EpicNavigationNode();

    /**
     *  The constructor for the EpicNavigationNode, enabling the selection of the planner.
     *  @param  alg     The algorithm to use (see defines above).
     */
    EpicNavigationNode(unsigned int alg);

    /**
     *  The deconstructor for the EpicNavigationNode.
     */
    virtual ~EpicNavigationNode();

    /**
     *  Initialize the services and messages.
     *  @param  name    The name to use for registering and subscribing.
     *  @return True if successful in registering and subscribing, false otherwise.
     */
    bool initialize(std::string name);

    /**
     *  Update the harmonic function or other planner one step.
     *  @param  num_steps   The number of steps to do for the algorithm.
     */
    void update(unsigned int num_steps);

    /**
     *  Handler for receiving OccupancyGrid messages (see defines above; values differ here).
     *  @param  msg     The OccupancyGrid message.
     */
    void subOccupancyGrid(const nav_msgs::OccupancyGrid::ConstPtr &msg);

    /**
     *  Handler for receiving add goal(s) service request.
     *  @param  req     The AddGoal service request containing the goal location(s) to add.
     *  @param  res     The AddGoal service response containing if it was successful or not. 
     */
    bool srvAddGoals(epic::ModifyGoals::Request &req, epic::ModifyGoals::Response &res);

    /**
     *  Handler for receiving remove goal(s) messages.
     *  @param  req     The RemoveGoal service request containing the goal location(s) to remove.
     *  @param  res     The RemoveGoal service response containing if it was successful or not.
     */
    bool srvRemoveGoals(epic::ModifyGoals::Request &req, epic::ModifyGoals::Response &res);

    /**
     *  Handler for service requests for generating Path messages.
     *  @param  req     The ComputePath service request containing the start location, max length, precision, etc.
     *  @param  res     The ComputePath service response containing the resulting path.
     */
    bool srvComputePath(epic::ComputePath::Request &req, epic::ComputePath::Response &res);

private:
    // The subscriber for the OccupancyGrid message.
    ros::Subscriber sub_occupancy_grid;

    // The service for AddGoal.
    ros::ServiceServer srv_add_goals;

    // The service for RemoveGoal.
    ros::ServiceServer srv_remove_goals;

    // The service for ComputePath.
    ros::ServiceServer srv_compute_path;

    // Current width of the map.
    unsigned int width;

    // Current height of the map.
    unsigned int height;

    // Current resolution of the map.
    float resolution;

    // Current x offset of the map.
    float x_offset;

    // Current y offset of the map.
    float y_offset;

    // The algorithm to use. Default is EPIC_ALGORITHM_HARMONIC.
    unsigned int algorithm;

    // The Harmonic object for use if algorithm is EPIC_ALGORITHM_HARMONIC.
    Harmonic harmonic;

    // If this is GPU-capable, or not.
    bool gpu;

    // If this class has been properly initialized or not.
    bool initialized;

};

};


#endif // EPIC_NAVIGATION_NODE_H

